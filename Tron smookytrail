// Author: Patricio Gonzalez Vivo
// Title: smookytrail

#ifdef GL_ES
precision mediump float;
#endif

uniform vec2 u_resolution;
uniform vec2 u_mouse;
uniform float u_time;

float dist (vec2 st) {
    // return length(st);
    // return dot(st,st);
    // return min(abs(st.x+st.y),abs(st.x-st.y));
    // return abs(st.x+st.y);
    // return abs(st.x)+abs(st.y);
    return abs(st.x)+0.132;
}

float random(in float x){ return fract(sin(x)*43758.5453); }
float random(in vec2 st){ return fract(sin(dot(st.xy ,vec2(12.9898,78.233))) * 43758.5453); }

// Some useful functions
vec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }
vec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }
vec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }

//
// Description : GLSL 2D simplex noise function
//      Author : Ian McEwan, Ashima Arts
//  Maintainer : ijm
//     Lastmod : 20110822 (ijm)
//     License : 
//  Copyright (C) 2011 Ashima Arts. All rights reserved.
//  Distributed under the MIT License. See LICENSE file.
//  https://github.com/ashima/webgl-noise
// 
float snoise(vec2 v) {

    // Precompute values for skewed triangular grid
    const vec4 C = vec4(0.211324865405187,
                        // (3.0-sqrt(3.0))/6.0
                        0.366025403784439,  
                        // 0.5*(sqrt(3.0)-1.0)
                        -0.577350269189626,  
                        // -1.0 + 2.0 * C.x
                        0.024390243902439); 
                        // 1.0 / 41.0

    // First corner (x0)
    vec2 i  = floor(v + dot(v, C.yy));
    vec2 x0 = v - i + dot(i, C.xx);

    // Other two corners (x1, x2)
    vec2 i1 = vec2(0.0);
    i1 = (x0.x > x0.y)? vec2(1.0, 0.0):vec2(0.0, 1.0);
    vec2 x1 = x0.xy + C.xx - i1;
    vec2 x2 = x0.xy + C.zz;

    // Do some permutations to avoid
    // truncation effects in permutation
    i = mod289(i);
    vec3 p = permute(
            permute( i.y + vec3(0.0, i1.y, 1.0))
                + i.x + vec3(0.0, i1.x, 1.0 ));

    vec3 m = max(0.5 - vec3(
                        dot(x0,x0), 
                        dot(x1,x1), 
                        dot(x2,x2)
                        ), 0.0);

    m = m*m ;
    m = m*m ;

    // Gradients: 
    //  41 pts uniformly over a line, mapped onto a diamond
    //  The ring size 17*17 = 289 is close to a multiple 
    //      of 41 (41*7 = 287)

    vec3 x = 2.0 * fract(p * C.www) - 1.0;
    vec3 h = abs(x) - 0.5;
    vec3 ox = floor(x + 0.5);
    vec3 a0 = x - ox;

    // Normalise gradients implicitly by scaling m
    // Approximation of: m *= inversesqrt(a0*a0 + h*h);
    m *= 1.79284291400159 - 0.85373472095314 * (a0*a0+h*h);

    // Compute final noise value at P
    vec3 g = vec3(0.0);
    g.x  = a0.x  * x0.x  + h.x  * x0.y;
    g.yz = a0.yz * vec2(x1.x,x2.x) + h.yz * vec2(x1.y,x2.y);
    return 130.0 * dot(m, g);
}

vec3 palette(in float x) {
    return mix(vec3(0.000,1.000,1.), 
               vec3(1.,0.,0.), 
               vec3(smoothstep(0.0,0.952, x),
                    sin(x*2.806), 
                    smoothstep(-0.512,1.072,x)));
}


void main() {
    vec2 st = gl_FragCoord.xy/u_resolution.xy;
    float zoom = 1.-u_mouse.x/u_resolution.x;
    float t = u_time*.1;
    
    // Set the space
    st = (st-.5)*(.01+2.*zoom)+.5;
    if (u_resolution.y > u_resolution.x ) {
        st.y *= u_resolution.y/u_resolution.x;
        st.y -= (u_resolution.y*.5-u_resolution.x*.5)/u_resolution.x;
    } else {
        st.x *= u_resolution.x/u_resolution.y;
        st.x -= (u_resolution.x*.5-u_resolution.y*.5)/u_resolution.y;
    }

    st -= .5;
    st.y -= 1.492;
    st = st.yx;
    
    float rInv = 1./dist(st);
    vec2 pos = st * rInv - vec2(rInv,0.0);
    rInv *= 0.180;

    // Grid
    pos *= vec2(30.0);
    vec2 ipos = floor(pos);
    vec2 fpos = fract(pos);
    
    float pct = 1.0;
    vec3 color = palette(mix(random(ipos.y+floor(t)),random(ipos.y+floor(t)+1.),fract(t)));
	vec3 background = mix(vec3(0.144,0.551,0.565),vec3(0.090,0.100,0.150),smoothstep(-0.2,.3,rInv));;
    
    pct -= max(sin(fpos.y*3.1415)*0.4,
               step(.9,fpos.y) );
    pct -= snoise(pos+vec2(-u_time,fpos.y))*0.128;
    
    color = mix(background,color,pct);
    
    gl_FragColor = vec4(color,1.0);
}
