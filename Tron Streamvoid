// Author: Patricio Gonzalez Vivo
// Title: StreamVoid

#ifdef GL_ES
precision mediump float;
#endif

uniform vec2 u_resolution;
uniform vec2 u_mouse;
uniform float u_time;

float dist (vec2 st) {
    // return length(st);
    // return dot(st,st);
    // return min(abs(st.x+st.y),abs(st.x-st.y));
    // return abs(st.x+st.y);
    // return abs(st.x)+abs(st.y);
    return abs(st.x)+0.132;
}

float random(in float x){ return fract(sin(x)*43758.5453); }
float random(in vec2 st){ return fract(sin(dot(st.xy ,vec2(12.9898,78.233))) * 43758.5453); }

float pattern(vec2 st, float v, float t) {
    float p = floor(st.x+v);
    return step(t, (random(p*.000001)+random(p))*.5 );
}

float randomChar(vec2 outer,vec2 inner){
    float grid = 5.;
    vec2 margin = vec2(.2,.05);
    vec2 borders = step(margin,inner)*step(margin,1.-inner);
    vec2 ipos = floor(inner*grid);
    vec2 fpos = fract(inner*grid);
    return step(.5,random(outer*64.+ipos)) * borders.x * borders.y * step(0.01,fpos.x) * step(0.01,fpos.y);
}

vec3 palette(in float x) {
    return mix(vec3(0.000,1.000,1.), 
               vec3(1.,0.,0.), 
               vec3(smoothstep(0.0,0.952, x),
                    sin(x*2.806), 
                    smoothstep(-0.512,1.072,x)));
}


void main() {
    vec2 st = gl_FragCoord.xy/u_resolution.xy;
    float zoom = 1.-u_mouse.x/u_resolution.x;
    float t = u_time;
    
    // Set the space
    st = (st-.5)*(.01+2.*zoom)+.5;
    if (u_resolution.y > u_resolution.x ) {
        st.y *= u_resolution.y/u_resolution.x;
        st.y -= (u_resolution.y*.5-u_resolution.x*.5)/u_resolution.x;
    } else {
        st.x *= u_resolution.x/u_resolution.y;
        st.x -= (u_resolution.x*.5-u_resolution.y*.5)/u_resolution.y;
    }

    st -= .5;
    st.y -= 1.5;
    st = st.yx;
    
    float rInv = 1./dist(st);
    vec2 pos = st * rInv - vec2(rInv,0.0);
    rInv *= 0.180;

    // Grid
    pos *= vec2(30.0);
    vec2 ipos = floor(pos);
    vec2 fpos = fract(pos);
    float seed = random(ipos.y);
    float vel = t*20.;
    vel *= -.5 * seed - .5;
    
    float amount = 1.-abs(sin(t*0.1))*.45;
    float margin = 0.146;

    // Stream
    float pct = pattern(pos, vel-0.15, .5);

    // Matrix
    vec2 rows = floor(vec2(13.,8.));
    vec2 i_pos = floor(fpos*rows);
    vec2 f_pos = fract(fpos*rows);

    i_pos.y += mod(floor(t*10.*random(i_pos.y+1.)),max(u_resolution.x,u_resolution.y));
    
    
    // Colors
    vec3 background = mix(vec3(0.144,0.551,0.565),vec3(0.090,0.100,0.150),smoothstep(-0.2,.3,rInv));
    vec3 color = palette(abs(sin(seed+t*0.05)));
    
    // background = mix(background,color,(1.-zoom)*pct);
    pct = mix(pct, min(randomChar(i_pos,f_pos.yx)*random(i_pos),pct),1.-zoom);
    // color = mix(color,palette(pct),1.-zoom);
    
    color = mix(background,
                color,
                pct*step(margin,fpos.y)*step(margin,1.-fpos.y)*smoothstep(0.408,0.816,1.-rInv));

    
    gl_FragColor = vec4(color,1.0);
}
